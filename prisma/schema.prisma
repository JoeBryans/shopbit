// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  email       String       @unique
  name        String
  image       String?
  role        String       @default("user")
  phone       String
  password    String
  accounts    Account[]
  products    Product[]
  sessions    Session[]
  cartItems   CartItems[]
  orders      Order[]
  address     Address[]
  payment     Payment[]
  recentViews RecentView[]
}

model Account {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  userId            String    @db.ObjectId
  user              User      @relation(fields: [userId], references: [id])
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         DateTime?
  tokenType         String?
  scope             String?
  idToken           String?
  sessionState      String?
  oauthTokenSecret  String?
  oauthToken        String?
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  sku            String?          @unique
  description    String?
  images         Image[]
  categoryId     String?          @db.ObjectId
  category       Category?        @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  quantity       Int?
  price          Float?
  lowStock       Float?
  discountPrice  Float?
  units          String?
  brand          String
  dimensions     String?
  weight         Float?
  taxRate        Float?
  shippingInfo   String?
  warranty       String?
  additionalInfo Json?
  size           Json?
  // location        String?
  color          ProductVariant[]
  review         Review[]
  cartItems      CartItems[]
  orderItems     OrderItem[]
  deals          Deals[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  userId         String           @db.ObjectId
  user           User             @relation(fields: [userId], references: [id])
  recentViews    RecentView[]

  @@index([categoryId, name, price])
  @@index([size, sku])
  @@index([lowStock, brand])
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  slug      String
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
}

model Image {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  url           String?
  cloudPublicId String?
  // color     String
  productId     String   @db.ObjectId
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model ProductVariant {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  color     String? // e.g. "Titanium Whitesilver"
  hex       String? // e.g. "#E5E4E2"
  price     Float?
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @db.ObjectId
}

model Deals {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String   @unique @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RecentView {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  userId    String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  userId    String?
  // user User @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  rating    Int?
  comment   String?
  createAt  DateTime @default(now())
}

model Order {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  total         Float
  orderItems    OrderItem[]
  userId        String?        @db.ObjectId
  status        OrderStatus?   @default(PENDING)
  user          User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  paymentStatus PaymentStatus? @default(PENDING)
  payment       Payment[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([userId])
  @@index([status])
  @@index([paymentStatus])
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
  DELIVERED
  FAILED
  REFUNDED
  VOIDED
  UNCOLLECTIBLE
}

enum PaymentStatus {
  PENDING
  FAILED
  // PROCESSING
  PAID
}

model OrderItem {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String @db.ObjectId
  productId String @db.ObjectId
  quantity  Int
  price     Float

  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItems {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  productId  String  @db.ObjectId
  product    Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId     String  @db.ObjectId
  users      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  quantity   Int
  totalPrice Int

  @@unique([productId, userId])
}

model Address {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  userId          String  @db.ObjectId
  users           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName       String?
  lastName        String?
  address         String?
  deliveryAddress String?
  city            String?
  state           String?
  postalCode      String?
  country         String?
  email           String?
  phone           String?
  additionalInfo  String?

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  userId          String  @db.ObjectId
  users           User    @relation(fields: [userId], references: [id])
  payment         String?
  payment_method  String?
  paymentIntentId String?
  status          String?
  amount          Int?
  orderId         String  @db.ObjectId
  order           Order   @relation(fields: [orderId], references: [id])
}
